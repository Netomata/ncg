#!/usr/bin/ruby

# $Id$
# Copyright (C) 2008, 2009 Netomata, Inc.  All Rights Reserved. 
# Please review accompanying 'LICENSE' file or
# http://www.netomata.com/docs/licenses/ncg for important notices,
# disclaimers, and license terms.

require 'optparse'

# we delay requiring the 'netomata' libraries until after the command line
# arguments are parsed, so that the library location can be specified by a
# '-L' command line argument

$NETOMATA_LIB = "/usr/local/lib/netomata/lib"
if (ENV.key?("NETOMATA_LIB")) then
    $NETOMATA_LIB = ENV["NETOMATA_LIB"]
end

class NcgArguments < Hash
    def initialize(args)
	super()

	opts = OptionParser.new do |opts|
	    opts.banner = "Usage: #$0 [options]"
	    opts.on('-d', '--dump',
	    	'dump the fully-parsed data structure') do
		self[:dump] = true
	    end
	    opts.on('-D', '--debug', 'enable debug mode') do
		self[:debug] = true
		$debug = true
	    end
	    opts.on('-E', '--error-dump', '=FILENAME',
		    'specify file to dump context to, if error occurs') do |val|
		self[:error_dump] = val
		$error_dump = val
	    end
	    opts.on('-k', '--keys',
		'dump the list of keys') do
		self[:keys] = true
	    end
	    opts.on('-L', '--libdir', '=DIRNAME',
		    'specify Netomata library location (overrides NETOMATA_LIB envariable)') do |val|
		self[:libdir] = val
		$NETOMATA_LIB = val
	    end
	    opts.on('-v', '--verbose', 'enable verbose mode') do
		self[:verbose] = true
		$verbose = true
	    end
	    opts.on('-V', '--version', 'print version number') do
		# can't simply print the version number here yet,
		# because the Netomata libraries haven't been require'd yet,
		# because options need to be processed first,
		# because options might include '-L' to specify library location
		self[:version] = true
	    end
	    opts.on_tail('-h', '--help', 'display this help and exit') do
		puts opts
		exit
	    end
	end
	
	opts.parse!(args)
    end
end

# parse the command line arguments
args = NcgArguments.new(ARGV)

# push the NETOMATA_LIB location onto the load path, before requiring any
# Netomata-provided libraries
$LOAD_PATH.push($NETOMATA_LIB)
puts "NETOMATA_LIB=#{$NETOMATA_LIB}" if $verbose

# we delay requiring the 'netomata' libraries until here, so that the location
# of the libraries can be specified by a '-L' command line argument
require 'netomata'

if (args[:version]) then
    puts Netomata::Version
    exit
end

begin	# rescue block

    net = Netomata::Node.new

    ARGV.each do |fn|
	net.import_file(fn)
    end

    if (args[:keys]) then
	puts net.keys_r.join("\n")
	exit
    end

    if (args[:dump]) then
	net.dump
	exit
    end

    # get the list of targets to generate config files for
    net.keys_having_key("ncg_output").each do |target_key|
	if $verbose then
	    puts "Generating #{net[target_key]["ncg_output"]} for #{target_key}"
	end
	unless (template_filename = net[target_key]["ncg_template"])
	    raise "Target '#{target_key}' has 'ncg_output' key," +
	    	"but no 'ncg_template' key"
	end

	# set up shortcut "target" variable
	target = net[target_key]

	r = Netomata::Template::FromFile.new(template_filename).
		result_from_vars({
		    "@net" => net,
		    "@target_key" => target_key,
		    "@target" => target
		})

	of = File.new(target["ncg_output"], "w")
	of.write(r)
	of.close
    end
rescue SystemExit => exc
    # Need to explicitly capture "SystemExit" exceptions, so that we don't
    # print a backtrace whenever something does a legitimate "exit"
    raise exc.exception
rescue Exception => exc	
    # Need to explicitly capture all other Exceptions, because by default,
    # rescue only captures StandardError and its subclasses.
    bt = exc.backtrace
    $stderr.print "ERROR(", exc.class, "): ", exc.message, "\n"
    $stderr.print "\tat ", bt.first, "\n"
#    $stderr.print "\twhile generating #{net[target_key]["ncg_output"]}\n"
#    $stderr.print "\tfor #{target_key}\n"
    $stderr.print "="*79, "\n"
    $stderr.print "BACKTRACE\n"
    $stderr.print "---------\n"
    raise exc.exception
end
