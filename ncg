#!/usr/bin/ruby

# $Id$
# Copyright (c) 2008 Netomata, Inc.  All Rights Reserved. 
# Please review accompanying 'LICENSE' file or
# http://www.netomata.com/license_v1 for important notices,
# disclaimers, and license terms (GPL v2.0 or alternative).

require 'netomata'
require 'erb'
require 'ruby-debug'
require 'optparse'

class NcgArguments < Hash
    def initialize(args)
	super()

	opts = OptionParser.new do |opts|
	    opts.banner = "Usage: #$0 [options]"
	    opts.on('-v', '--verbose', 'verbose mode') do
		self[:verbose] = true
	    end
	    opts.on('-k', '--keys',
		'dump the list of keys defined by the config') do
		self[:keys] = true
	    end
	    opts.on('-d', '--dump',
	    	'dump the fully-parsed data structure defined by the config') do
		self[:dump] = true
	    end
	    opts.on_tail('-h', '--help', 'display this help and exit') do
		puts opts
		exit
	    end
	end
	
	opts.parse!(args)
    end
end

args = NcgArguments.new(ARGV)

net = Netomata::Node.new

ARGV.each do |fn|
    net.import_file(open(fn))
end

if (args[:keys]) then
    puts net.keys_r.join("\n")
    exit
end

if (args[:dump]) then
    pp net
    exit
end

# get the list of targets to generate config files for
net.keys_having_key("ncg_output").each { |target_key|
    puts "Generating #{net[target_key]["ncg_output"]} for #{target_key}" if args[:verbose]
    unless template_filename = net[target_key]["ncg_template"] 
	raise
	"Target '#{target_key}' has 'ncg_output' key, but no 'ncg_template' key"
    end

    # set up shortcut "target" variable
    target = net[target_key]

    r = Netomata::Template::FromFile.new(template_filename).result_from_vars({
	"@net" => net,
        "@target_key" => target_key,
        "@target" => target
    })

    of = File.new(target["ncg_output"], "w")
    of.write(r)
    of.close
}
